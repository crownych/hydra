/*
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/lestrrat-go/jwx/jwk"
	"github.com/lestrrat-go/jwx/jws"
	"github.com/patrickmn/go-cache"
	"github.com/pborman/uuid"
	"math"
	"net/http"
	"net/url"
	"strings"
	"time"
)

const (
	CacheOAuthServerMetadata = "auth-server.metadata"
	CacheOAuthServerJWKS     = "auth-server.jwks"
	CachePoPJWKSPrefix		 = "pop#"
	CacheOauthTokenPrefix	 = "token#"
)

type OAuth2Api struct {
	Configuration *Configuration
}

func NewOAuth2Api() *OAuth2Api {
	configuration := NewConfiguration()
	return &OAuth2Api{
		Configuration: configuration,
	}
}

func NewOAuth2ApiWithBasePath(basePath string) *OAuth2Api {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &OAuth2Api{
		Configuration: configuration,
	}
}

/**
 * Accept an consent request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider includes additional information, such as session data for access and ID tokens, and if the consent request should be used as basis for future requests.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
 *
 * @param challenge
 * @param body
 * @return *CompletedRequest
 */
func (a OAuth2Api) AcceptConsentRequest(challenge string, body AcceptConsentRequest) (*CompletedRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Put")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/consent/{challenge}/accept"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(CompletedRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "AcceptConsentRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Accept an login request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has successfully authenticated and includes additional information such as the user&#39;s ID and if ORY Hydra should remember the user&#39;s user agent for future authentication attempts by setting a cookie.  The response contains a redirect URL which the login provider should redirect the user-agent to.
 *
 * @param challenge
 * @param body
 * @return *CompletedRequest
 */
func (a OAuth2Api) AcceptLoginRequest(challenge string, body AcceptLoginRequest) (*CompletedRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Put")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/login/{challenge}/accept"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(CompletedRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "AcceptLoginRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Create or update an OAuth 2.0 client
 * Create a new OAuth 2.0 client If you pass &#x60;client_secret&#x60; the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somewhere safe.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
 *
 * @param body
 * @param signingJwk
 * @return *PutClientResponse
 */
func (a OAuth2Api) PutOAuth2Client(body OAuth2Client) (*PutClientResponse, *APIResponse, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return nil, nil, errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}

	var localVarHttpMethod = http.MethodPut
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/clients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// set Cookie header
	localVarHttpHeaderCookies := make(map[string]string)

	localVarHttpHeaderCookie := a.Configuration.APIClient.SelectHeaderCookie(localVarHttpHeaderCookies)
	if localVarHttpHeaderCookie != "" {
		localVarHeaderParams["Cookie"] = localVarHttpHeaderCookie
	}

	swStatement, err := a.createSoftwareStatement(body)
	if err != nil {
		return nil, nil, err
	}

	// Create software_statement payload
	payload := make(map[string]interface{})
	payload["software_statement"] = swStatement

	// body params
	localVarPostBody = &payload
	var successPayload = new(PutClientResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "PutOAuth2Client", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Deletes an OAuth 2.0 Client
 * Delete an existing OAuth 2.0 Client by its ID.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
 *
 * @param id The id of the OAuth 2.0 Client.
 * @return void
 */
func (a OAuth2Api) DeleteOAuth2Client(id string) (*APIResponse, error) {
	if id == "" {
		return nil, errors.New("require client ID")
	}

	var localVarHttpMethod = strings.ToUpper("Delete")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/clients/{id}"
	localVarPath = strings.Replace(localVarPath, "{id}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "DeleteOAuth2Client", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Flush Expired OAuth2 Access Tokens
 * This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be not be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted automatically when performing the refresh flow.
 *
 * @param body
 * @return void
 */
func (a OAuth2Api) FlushInactiveOAuth2Tokens(body FlushInactiveOAuth2TokensRequest) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/flush"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "FlushInactiveOAuth2Tokens", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Get consent request information
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.
 *
 * @param challenge
 * @return *ConsentRequest
 */
func (a OAuth2Api) GetConsentRequest(challenge string) (*ConsentRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/consent/{challenge}"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(ConsentRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetConsentRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Get an login request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.
 *
 * @param challenge
 * @return *LoginRequest
 */
func (a OAuth2Api) GetLoginRequest(challenge string) (*LoginRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/login/{challenge}"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(LoginRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetLoginRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Get an OAuth 2.0 Client.
 * Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
 *
 * @param id The id of the OAuth 2.0 Client.
 * @param secret The secret of the OAuth 2.0 Client.
 * @return *OAuth2Client
 */
func (a OAuth2Api) GetOAuth2Client(id, secret string) (*OAuth2Client, *APIResponse, error) {
	if id == "" || secret == "" {
		return nil, nil, errors.New("client credentials required")
	}

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/clients/{id}"
	localVarPath = strings.Replace(localVarPath, "{id}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// set Authorization header
	localVarHeaderParams["Authorization"] = "Basic " + getBasicAuthEncodedString(id, secret)

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(OAuth2Client)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetOAuth2Client", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Server well known configuration
 * The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll your own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this flow at https://openid.net/specs/openid-connect-discovery-1_0.html
 *
 * @return *WellKnown
 */
func (a OAuth2Api) GetWellKnown() (*WellKnown, *APIResponse, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return nil, nil, errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}
	authSrvPubJwk := a.Configuration.AuthSvcOfflinePublicJwk

	if authServerMetadata, found := a.Configuration.cacheGet(CacheOAuthServerMetadata); found {
		return authServerMetadata.(*WellKnown), nil, nil
	}

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/.well-known/oauth-authorization-server"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(WellKnown)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetWellKnown", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}

	// 驗證 JWS 及取得 OAuth Authorization Metadata 內容
	var payloadMap map[string]string
	err = json.Unmarshal(localVarHttpResponse.Body(), &payloadMap)
	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	signedMetadata := payloadMap["signed_metadata"]
	keyId, err := extractKeyIdFromJWSHeader(signedMetadata)
	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	if keyId != authSrvPubJwk.Kid {
		return successPayload, localVarAPIResponse, errors.New("invalid auth service public key")
	}
	srvJwk, _, err := convertToJwxJWK(authSrvPubJwk)
	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	metadata, err := jws.VerifyWithJWK([]byte(signedMetadata), srvJwk)
	if err != nil {
		return successPayload, localVarAPIResponse, err
	}

	err = json.Unmarshal(metadata, &successPayload)
	if err == nil {
		a.Configuration.cacheSet(CacheOAuthServerMetadata, successPayload, 5 * time.Minute)
	}
	return successPayload, localVarAPIResponse, err
}

/**
 * Introspect OAuth2 tokens
 * The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token is neither expired nor revoked. If a token is active, additional information on the token will be included. You can set additional data for a token by setting &#x60;accessTokenExtra&#x60; during the consent flow.
 *
 * @param token The string value of the token. For access tokens, this is the \&quot;access_token\&quot; value returned from the token endpoint defined in OAuth 2.0 [RFC6749], Section 5.1. This endpoint DOES NOT accept refresh tokens for validation.
 * @param scope An optional, space separated list of required scopes. If the access token was not granted one of the scopes, the result of active will be false.
 * @return *OAuth2TokenIntrospection
 */
func (a OAuth2Api) IntrospectOAuth2Token(token string, scope string) (*OAuth2TokenIntrospection, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/introspect"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(basic)' required
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != "" {
		localVarHeaderParams["Authorization"] = "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// authentication '(oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != "" {
		localVarHeaderParams["Authorization"] = "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams["token"] = a.Configuration.APIClient.ParameterToString(token, "")
	localVarFormParams["scope"] = a.Configuration.APIClient.ParameterToString(scope, "")
	var successPayload = new(OAuth2TokenIntrospection)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "IntrospectOAuth2Token", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * List OAuth 2.0 Clients
 * This endpoint lists all clients in the database, and never returns client secrets.  OAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.
 *
 * @param authSrvPubJwk The public key of auth service.
 * @param limit The maximum amount of policies returned.
 * @param offset The offset from where to start looking.
 * @return []OAuth2Client
 */
func (a OAuth2Api) ListOAuth2Clients(limit int64, offset int64) ([]OAuth2Client, *APIResponse, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return nil, nil, errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}
	authSvcOfflinePubKey := a.Configuration.AuthSvcOfflinePublicJwk

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/clients"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
	localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]OAuth2Client)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "ListOAuth2Clients", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	// 驗證 JWS 及取得 resources 內容
	var payloadMap map[string]string
	err = json.Unmarshal(localVarAPIResponse.Payload, &payloadMap)
	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	signedClients := payloadMap["signed_clients"]
	rbuf, err := getSignedClaim("clients", signedClients, a.Configuration.BasePath, authSvcOfflinePubKey)
	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(rbuf, &successPayload)

	return *successPayload, localVarAPIResponse, err
}

/**
 * Lists all consent sessions of a user
 * This endpoint lists all user&#39;s granted consent sessions, including client and granted scope
 *
 * @param user
 * @return []PreviousConsentSession
 */
func (a OAuth2Api) ListUserConsentSessions(user string) ([]PreviousConsentSession, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/sessions/consent/{user}"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", fmt.Sprintf("%v", user), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]PreviousConsentSession)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "ListUserConsentSessions", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return *successPayload, localVarAPIResponse, err
}

/**
 * The OAuth 2.0 authorize endpoint
 * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
 *
 * @return void
 */
func (a OAuth2Api) OauthAuth() (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "OauthAuth", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * The OAuth 2.0 token endpoint
 * This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows. OAuth2 is a very popular protocol and a library for your programming language will exists.  To learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749
 *
 * @return *OauthTokenResponse
 */
func (a OAuth2Api) OauthToken(clientAssertion string, resource, scope string) (*OauthTokenResponse, *APIResponse, error) {
	if clientAssertion == "" {
		return nil, nil, errors.New("client assertion JWT must be set")
	}

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	/*
	// authentication '(basic)' required
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != "" {
		localVarHeaderParams["Authorization"] = "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// authentication '(oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != "" {
		localVarHeaderParams["Authorization"] = "Bearer " + a.Configuration.AccessToken
	}
	*/
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// Payload
	localVarFormParams["client_assertion"] = clientAssertion
	localVarFormParams["grant_type"] = "client_credentials"
	localVarFormParams["client_assertion_type"] = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
	if resource != "" {
		localVarFormParams["resource"] = resource
	}
	if scope != "" {
		localVarFormParams["resource"] = scope
	}

	var successPayload = new(OauthTokenResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "OauthToken", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Reject an consent request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider to authenticate the user and then tell ORY Hydra now about it. If the user authenticated, he/she must now be asked if the OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the user&#39;s behalf.  The consent provider which handles this request and is a web app implemented and hosted by you. It shows a user interface which asks the user to grant or deny the client access to the requested scope (\&quot;Application my-dropbox-app wants write access to all your private files\&quot;).  The consent challenge is appended to the consent provider&#39;s URL to which the user&#39;s user-agent (browser) is redirected to. The consent provider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the user accepted or rejected the request.  This endpoint tells ORY Hydra that the user has not authorized the OAuth 2.0 client to access resources on his/her behalf. The consent provider must include a reason why the consent was not granted.  The response contains a redirect URL which the consent provider should redirect the user-agent to.
 *
 * @param challenge
 * @param body
 * @return *CompletedRequest
 */
func (a OAuth2Api) RejectConsentRequest(challenge string, body RejectRequest) (*CompletedRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Put")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/consent/{challenge}/reject"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(CompletedRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RejectConsentRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Reject a login request
 * When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider (sometimes called \&quot;identity provider\&quot;) to authenticate the user and then tell ORY Hydra now about it. The login provider is an web-app you write and host, and it must be able to authenticate (\&quot;show the user a login screen\&quot;) a user (in OAuth2 the proper name for user is \&quot;resource owner\&quot;).  The authentication challenge is appended to the login provider URL to which the user&#39;s user-agent (browser) is redirected to. The login provider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.  This endpoint tells ORY Hydra that the user has not authenticated and includes a reason why the authentication was be denied.  The response contains a redirect URL which the login provider should redirect the user-agent to.
 *
 * @param challenge
 * @param body
 * @return *CompletedRequest
 */
func (a OAuth2Api) RejectLoginRequest(challenge string, body RejectRequest) (*CompletedRequest, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Put")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/requests/login/{challenge}/reject"
	localVarPath = strings.Replace(localVarPath, "{"+"challenge"+"}", fmt.Sprintf("%v", challenge), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(CompletedRequest)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RejectLoginRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * Revokes all previous consent sessions of a user
 * This endpoint revokes a user&#39;s granted consent sessions and invalidates all associated OAuth 2.0 Access Tokens.
 *
 * @param user
 * @return void
 */
func (a OAuth2Api) RevokeAllUserConsentSessions(user string) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Delete")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/sessions/consent/{user}"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", fmt.Sprintf("%v", user), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RevokeAllUserConsentSessions", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Invalidates a user&#39;s authentication session
 * This endpoint invalidates a user&#39;s authentication session. After revoking the authentication session, the user has to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens.
 *
 * @param user
 * @return void
 */
func (a OAuth2Api) RevokeAuthenticationSession(user string) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Delete")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/sessions/login/{user}"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", fmt.Sprintf("%v", user), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RevokeAuthenticationSession", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Revoke OAuth2 tokens
 * Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no longer be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token. Revoking a refresh token also invalidates the access token that was created with it.
 *
 * @param token
 * @return void
 */
func (a OAuth2Api) RevokeOAuth2Token(token string) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(basic)' required
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != "" {
		localVarHeaderParams["Authorization"] = "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// authentication '(oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != "" {
		localVarHeaderParams["Authorization"] = "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams["token"] = a.Configuration.APIClient.ParameterToString(token, "")
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RevokeOAuth2Token", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Revokes consent sessions of a user for a specific OAuth 2.0 Client
 * This endpoint revokes a user&#39;s granted consent sessions for a specific OAuth 2.0 Client and invalidates all associated OAuth 2.0 Access Tokens.
 *
 * @param user
 * @param client
 * @return void
 */
func (a OAuth2Api) RevokeUserClientConsentSessions(user string, client string) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Delete")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/sessions/consent/{user}/{client}"
	localVarPath = strings.Replace(localVarPath, "{"+"user"+"}", fmt.Sprintf("%v", user), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"client"+"}", fmt.Sprintf("%v", client), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RevokeUserClientConsentSessions", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Logs user out by deleting the session cookie
 * This endpoint deletes ths user&#39;s login session cookie and redirects the browser to the url listed in &#x60;LOGOUT_REDIRECT_URL&#x60; environment variable. This endpoint does not work as an API but has to be called from the user&#39;s browser.
 *
 * @return void
 */
func (a OAuth2Api) RevokeUserLoginCookie() (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/oauth2/auth/sessions/login/revoke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "RevokeUserLoginCookie", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * OpenID Connect Userinfo
 * This endpoint returns the payload of the ID Token, including the idTokenExtra values, of the provided OAuth 2.0 access token. The endpoint implements http://openid.net/specs/openid-connect-core-1_0.html#UserInfo .
 *
 * @return *UserinfoResponse
 */
func (a OAuth2Api) Userinfo() (*UserinfoResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/userinfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(oauth2)' required
	// oauth required
	if a.Configuration.AccessToken != "" {
		localVarHeaderParams["Authorization"] = "Bearer " + a.Configuration.AccessToken
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(UserinfoResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "Userinfo", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**`
 * Get Well-Known JSON Web Keys
 * Returns metadata for discovering important JSON Web Keys. Currently, this endpoint returns the public key for verifying OpenID Connect ID Tokens.  A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well.
 *
 * @return *JsonWebKeySet
 */
func (a OAuth2Api) WellKnown() (*JsonWebKeySet, *APIResponse, error) {
	if authServerJwks, found := a.Configuration.cacheGet(CacheOAuthServerJWKS); found {
		return authServerJwks.(*JsonWebKeySet), nil, nil
	}

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/jwks.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(JsonWebKeySet)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "WellKnown", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	if err == nil {
		a.Configuration.cacheSet(CacheOAuthServerJWKS, successPayload, cache.DefaultExpiration)
	}
	return successPayload, localVarAPIResponse, err
}

// 依據 `kid` 取得 Authorization Server 的 Public Key
func (a OAuth2Api) WellKnownByKeyId(kid string) *JsonWebKey {
	serverJWKs, _, err := a.WellKnown()
	if err != nil {
		return nil
	}
	for _, serverJwk := range serverJWKs.Keys {
		if serverJwk.Kid == kid {
			return &serverJwk
		}
	}
	return nil
}

func (a OAuth2Api) GetAnyAuthServerPublicKey() (jwk.Key, crypto.PublicKey, error) {
	serverJWKS, _, err := a.WellKnown()
	if err != nil {
		return nil, nil, errors.New("unable to get JWKS for OAuth Authorization Server: " + err.Error())
	} else if serverJWKS == nil || len(serverJWKS.Keys) == 0 {
		return nil, nil, errors.New("unable to get JWKS for OAuth Authorization Server")
	}
	return convertToJwxJWK(&serverJWKS.Keys[0])
}

/**
 * Commit an OAuth 2.0 confidential client
 *
 * @param cookies session cookies
 * @param commitCode string
 * @return *CommitClientResponse
 */
func (a OAuth2Api) CommitOAuth2Client(cookies map[string]string, commitCode string) (*CommitClientResponse, *APIResponse, error) {
	if cookies == nil || len(cookies) == 0 {
		return nil, nil, errors.New("empty session cookies")
	}

	var localVarHttpMethod = http.MethodPut
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/clients/commit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// set Cookie header
	localVarHttpHeaderCookies := make(map[string]string)
	for cookieName, cookieValue := range cookies {
		localVarHttpHeaderCookies[cookieName] = cookieValue
	}

	localVarHttpHeaderCookie := a.Configuration.APIClient.SelectHeaderCookie(localVarHttpHeaderCookies)
	if localVarHttpHeaderCookie != "" {
		localVarHeaderParams["Cookie"] = localVarHttpHeaderCookie
	}

	// body params
	payload := map[string]string{"commit_code": commitCode}

	localVarPostBody = &payload
	var successPayload = new(CommitClientResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "CommitOAuth2Client", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)

	return successPayload, localVarAPIResponse, err
}

func (a OAuth2Api) createSoftwareStatement(body OAuth2Client) (string, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return "", errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}

	serverPubJwk, serverPubKey, err := convertToJwxJWK(a.Configuration.AuthSvcOfflinePublicJwk)
	if err != nil {
		return "", err
	}

	// client's keys
	signingJwk := a.Configuration.PrivateJWK
	if signingJwk == nil {
		return "", errors.New("signing key is required")
	}
	pubJwk, _, err := convertToJwxJWK(extractPublicJWK(signingJwk))
	if err != nil {
		return "", err
	}
	_, signingKey, err := convertToJwxJWK(signingJwk)
	if err != nil {
		return "", err
	}

	// create and sign JWS of client's software statement
	jwsHeaders := make(map[string]interface{})
	jwsHeaders["alg"] = pubJwk.Algorithm()
	jwsHeaders["typ"] = "client-metadata+jwt"
	jwsHeaders["jwk"] = pubJwk
	bodyMap := map[string]interface{}{
		"aud":             a.Configuration.BasePath,
		"iat":             time.Now().UTC().Unix(),
		"client_metadata": body,
	}
	if !body.IsPublic() {
		if a.Configuration.ADUsername == "" || a.Configuration.ADPassword == "" {
			return "", errors.New("AD user credentials required")
		}
		bodyMap["authentication"] = map[string]string{
			"ad_user": a.Configuration.ADUsername,
			"ad_pwd":  a.Configuration.ADPassword,
		}
	}
	payload, err := json.Marshal(&bodyMap)
	if err != nil {
		return "", err
	}
	jwsMsg, err := jwsSign(jwsHeaders, payload, signingKey)
	if err != nil {
		return "", err
	}

	// create JWE using server's public key
	jweMsg, err := jweEncrypt(jwsMsg, serverPubKey, serverPubJwk.KeyID())
	if err != nil {
		return "", err
	}
	return string(jweMsg), nil
}

/**
 * Create or update an OAuth 2.0 resource
 *
 * @param body
 * @param signingJwk
 * @return *PutResourceResponse
 */
func (a OAuth2Api) PutOAuth2Resource(body OAuth2Resource) (*PutResourceResponse, *APIResponse, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return nil, nil, errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}

	var localVarHttpMethod = http.MethodPut
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// set Cookie header
	localVarHttpHeaderCookies := make(map[string]string)

	localVarHttpHeaderCookie := a.Configuration.APIClient.SelectHeaderCookie(localVarHttpHeaderCookies)
	if localVarHttpHeaderCookie != "" {
		localVarHeaderParams["Cookie"] = localVarHttpHeaderCookie
	}

	statement, err := a.createResourceStatement(body)
	if err != nil {
		return nil, nil, err
	}

	// Create resource_statement payload
	payload := make(map[string]interface{})
	payload["resource_statement"] = statement

	// body params
	localVarPostBody = &payload
	var successPayload = new(PutResourceResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "PutOAuth2Resource", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

func (a OAuth2Api) createResourceStatement(body OAuth2Resource) (string, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return "", errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}
	serverPubJwk, serverPubKey, err := convertToJwxJWK(a.Configuration.AuthSvcOfflinePublicJwk)
	if err != nil {
		return "", err
	}

	// client's keys
	signingJwk := a.Configuration.PrivateJWK
	if signingJwk == nil {
		return "", errors.New("signing key is required")
	}
	pubJwk, _, err := convertToJwxJWK(extractPublicJWK(signingJwk))
	if err != nil {
		return "", err
	}
	_, signingKey, err := convertToJwxJWK(signingJwk)
	if err != nil {
		return "", err
	}

	// create and sign JWS of client's software statement
	jwsHeaders := make(map[string]interface{})
	jwsHeaders["alg"] = pubJwk.Algorithm()
	jwsHeaders["typ"] = "resource-metadata+jwt"
	jwsHeaders["jwk"] = pubJwk
	bodyMap := map[string]interface{}{
		"aud":               a.Configuration.BasePath,
		"iat":               time.Now().UTC().Unix(),
		"resource_metadata": body,
	}
	if a.Configuration.ADUsername == "" || a.Configuration.ADPassword == "" {
		return "", errors.New("AD user credentials required")
	}
	bodyMap["authentication"] = map[string]string{
		"ad_user": a.Configuration.ADUsername,
		"ad_pwd":  a.Configuration.ADPassword,
	}

	payload, err := json.Marshal(&bodyMap)
	if err != nil {
		return "", err
	}
	jwsMsg, err := jwsSign(jwsHeaders, payload, signingKey)
	if err != nil {
		return "", err
	}

	// create JWE using server's public key
	jweMsg, err := jweEncrypt(jwsMsg, serverPubKey, serverPubJwk.KeyID())
	if err != nil {
		return "", err
	}
	return string(jweMsg), nil
}

/**
 * Commit an OAuth 2.0 resource
 *
 * @param cookies session cookies
 * @param commitCode string
 * @return *CommitResourceResponse
 */
func (a OAuth2Api) CommitOAuth2Resource(cookies map[string]string, commitCode string) (*CommitResourceResponse, *APIResponse, error) {
	if cookies == nil || len(cookies) == 0 {
		return nil, nil, errors.New("empty session cookies")
	}

	var localVarHttpMethod = http.MethodPut
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/resources/commit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// set Cookie header
	localVarHttpHeaderCookies := make(map[string]string)
	for cookieName, cookieValue := range cookies {
		localVarHttpHeaderCookies[cookieName] = cookieValue
	}

	localVarHttpHeaderCookie := a.Configuration.APIClient.SelectHeaderCookie(localVarHttpHeaderCookies)
	if localVarHttpHeaderCookie != "" {
		localVarHeaderParams["Cookie"] = localVarHttpHeaderCookie
	}

	// body params
	payload := map[string]string{"commit_code": commitCode}

	localVarPostBody = &payload
	var successPayload = new(CommitResourceResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "CommitOAuth2Resource", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)

	return successPayload, localVarAPIResponse, err
}

/**
 * Deletes an OAuth 2.0 Resource
 * Delete an existing OAuth 2.0 Resource by its URN.
 *
 * @param urn The URN of the OAuth 2.0 Resource.
 * @return void
 */
func (a OAuth2Api) DeleteOAuth2Resource(urn string) (*APIResponse, error) {
	if urn == "" {
		return nil, errors.New("resource urn is required")
	}

	var localVarHttpMethod = strings.ToUpper("Delete")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/resources/{urn}"
	localVarPath = strings.Replace(localVarPath, "{urn}", fmt.Sprintf("%v", urn), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "DeleteOAuth2Resource", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

/**
 * Get an OAuth 2.0 resource.
 * Get an OAUth 2.0 resource by its URN.
 *
 * @param urn The urn of the OAuth 2.0 Resource.
 * @return *OAuth2Resource
 */
func (a OAuth2Api) GetOAuth2Resource(urn string) (*OAuth2Resource, *APIResponse, error) {
	if urn == "" {
		return nil, nil, errors.New("resource urn is required")
	}

	var localVarHttpMethod = http.MethodGet
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/resources/{urn}"
	localVarPath = strings.Replace(localVarPath, "{urn}", fmt.Sprintf("%v", urn), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(OAuth2Resource)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "GetOAuth2Resource", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

/**
 * List OAuth 2.0 Resources
 * This endpoint lists all resources in the database.
 *
 * @param authSrvPubJwk The public key of auth service.
 * @param limit The maximum amount of policies returned.
 * @param offset The offset from where to start looking.
 * @return []OAuth2Resource
 */
func (a OAuth2Api) ListOAuth2Resources(limit int64, offset int64) ([]OAuth2Resource, *APIResponse, error) {
	if a.Configuration.AuthSvcOfflinePublicJwk == nil {
		return nil, nil, errors.New("'Configuration.AuthSvcOfflinePublicJwk' must be set")
	}
	authSvcOfflinePubKey := a.Configuration.AuthSvcOfflinePublicJwk

	var localVarHttpMethod = http.MethodGet
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("limit", a.Configuration.APIClient.ParameterToString(limit, ""))
	localVarQueryParams.Add("offset", a.Configuration.APIClient.ParameterToString(offset, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]OAuth2Resource)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "ListOAuth2Resources", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	// 驗證 JWS 及取得 resources 內容
	var payloadMap map[string]string
	err = json.Unmarshal(localVarAPIResponse.Payload, &payloadMap)
	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	signedResources := payloadMap["signed_resources"]
	rbuf, err := getSignedClaim("resources", signedResources, a.Configuration.BasePath, authSvcOfflinePubKey)
	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(rbuf, &successPayload)

	return *successPayload, localVarAPIResponse, err
}

/**
 * Get OAuth 2.0 access token.
 *
 * @return string, error
 */
func (a OAuth2Api) GetOAuth2Token(resource, scope string) (*OauthTokenResponse, *ecdsa.PrivateKey, error) {
	if a.Configuration.Username == "" {
		return nil, nil, errors.New("'Configuration.Username' (client ID) must be set")
	}
	if a.Configuration.PrivateJWK == nil {
		return nil, nil, errors.New("'Configuration.PrivateJWK' must be set")
	}

	// 當 resource 與 scope 皆為空時，取得 resources 清單進行請求
	if resource == "" && scope == "" {
		resources, _, err := a.ListOAuth2Resources(math.MaxInt64, 0)
		if err != nil {
			return nil, nil, errors.New("get OAuth 2.0 resource list failed: " + err.Error())
		}
		for i, v := range resources {
			if i > 0 {
				resource += " "
			}
			resource += v.GetUrn()
		}
	}

	tokenCacheKey := a.getTokenCacheKey(resource, scope)

	// try to get token from cache and validate it
	cachedTokenResp, tokenExists := a.Configuration.cacheGet(tokenCacheKey)
	if tokenExists {
		popPrivKey, _ := a.isTokenValid(cachedTokenResp.(OauthTokenResponse))
		if popPrivKey != nil {
			cTokenResp := cachedTokenResp.(OauthTokenResponse)
			return &cTokenResp, popPrivKey, nil
		}
	}

	//  create PoP Key pair
	popKeyId := uuid.New()
	popJWKS, err := a.GetPoPKeyPair(popKeyId)
	if err != nil {
		return nil, nil, errors.New("create PoP key failed:" + err.Error())
	}
	popECPrivKey, _ := LoadECPrivateKeyFromJsonWebKey(getPrivateJWKFromJWKS(popJWKS))

	// create client assertion
	clientAssertion, err := a.CreateOAuth2ClientAssertion(popJWKS)
	if err != nil {
		return nil, nil, errors.New("create client assertion failed:" + err.Error())
	}

	// request new token
	tokenResp, _, err := a.OauthToken(clientAssertion, resource, scope)
	if err != nil {
		return nil, nil, errors.New("request access token failed: " + err.Error())
	}

	// set cache
	expiredAt := time.Duration(tokenResp.ExpiresIn - time.Now().UTC().Unix()) * time.Second
	a.Configuration.cacheSet(tokenCacheKey, *tokenResp, expiredAt)

	return tokenResp, popECPrivKey, nil
}

// Get access token cache
// tokenCacheKey format: token#<resource_hash>#<scope_hash>
func (a OAuth2Api) getTokenCacheKey(resource, scope string) string {
	tokenCacheKey := CacheOauthTokenPrefix

	var resourceHash string
	if resource != "" {
		resourceHash = getHexEncodedHashString(resource)
	} else {
		resourceHash = getHexEncodedHashString("")
	}
	tokenCacheKey += resourceHash

	var scopeHash string
	if scope != "" {
		scopeHash = getHexEncodedHashString(scope)
	} else {
		scopeHash = getHexEncodedHashString("")
	}
	tokenCacheKey += "#" + scopeHash

	return tokenCacheKey
}

// 檢查 token 是否有效 (未過期且 PoP private key 有效)，Token 有效時返回 PoP Private Key
func (a OAuth2Api) isTokenValid(tokenResponse OauthTokenResponse) (*ecdsa.PrivateKey, error) {
	_, claims, err := getJWSContent(tokenResponse.AccessToken)
	if err == nil {
		// check token is expired
		isTokenExpired := false
		exp, expExists := claims["exp"]
		if expExists {
			if time.Now().UTC().Unix() >= int64(exp.(float64)) {
				isTokenExpired = true
			}
		}
		if !isTokenExpired {
			// check pop cnf key exists
			cnf, cnfExists := claims["cnf"]
			if cnfExists {
				cnf := cnf.(map[string]interface{})
				cnfJwk := cnf["jwk"].(map[string]interface{})
				cnfJwkId := cnfJwk["kid"].(string)
				popJWKS, popJWKSExists := a.Configuration.cacheGet(CachePoPJWKSPrefix + strings.Replace(cnfJwkId, "pop:public:", "", 1))
				if popJWKSExists {
					popPrivKey := getPrivateJWKFromJWKS(popJWKS.(*JsonWebKeySet))
					if popPrivKey.X == cnfJwk["x"].(string) && popPrivKey.Y == cnfJwk["y"].(string) {
						popECPrivKey, err := LoadECPrivateKeyFromJsonWebKey(popPrivKey)
						if err == nil {
							return popECPrivKey, nil
						}
					}
				}
			}
		}
	}
	return nil, errors.New("invalid token")
}

/**
 * Create OAuth 2.0 client assertion.
 *
 * @return string, error
 */
func (a OAuth2Api) CreateOAuth2ClientAssertion(popJWKS *JsonWebKeySet) (string, error) {
	if a.Configuration.Username == "" {
		return "", errors.New("'Configuration.Username' (client ID) must be set")
	}
	if popJWKS == nil {
		return "", errors.New("PoP JWKS must be set")
	}

	pubJwk, _, err := convertToJwxJWK(extractPublicJWK(a.Configuration.PrivateJWK))
	if err != nil {
		return "", err
	}

	var popPrivJwk, popPubJwk JsonWebKey
	for _, popJwk := range popJWKS.Keys {
		if strings.Contains(popJwk.Kid, "private:") {
			popPrivJwk = popJwk
		} else if strings.Contains(popJwk.Kid, "public:") {
			popPubJwk = popJwk
		}
	}

	if popPrivJwk.Kid == "" || popPubJwk.Kid == "" {
		return "", errors.New("PoP JWKS must contain both private and public keys")
	}

	_, popPrivECKey, err := convertToJwxJWK(&popPrivJwk)
	if err != nil {
		return "", err
	}

	// JWS Header
	jwsHeaders := make(map[string]interface{})
	jwsHeaders["alg"] = pubJwk.Algorithm()
	jwsHeaders["typ"] = "client-assertion+jwt"
	jwsHeaders["kid"] = pubJwk.KeyID()

	// JWS Payload
	iat := time.Now().UTC()
	expires := 30 * time.Minute
	exp := iat.Add(expires)
	bodyMap := map[string]interface{}{
		"iss": a.Configuration.Username,
		"aud": a.Configuration.BasePath + "/token",
		"sub": a.Configuration.Username,
		"exp": exp.Unix(),
		"iat": iat.Unix(),
		"jti": uuid.New(),
		"pop_cnf": map[string]JsonWebKey{
			"jwk": popPubJwk,
		},
	}
	payload, err := json.Marshal(&bodyMap)
	if err != nil {
		return "", err
	}

	jwsMsg, err := jwsSign(jwsHeaders, payload, popPrivECKey)
	if err != nil {
		return "", err
	}

	return string(jwsMsg), nil
}

func (a OAuth2Api) SendHttpGet(requestURL string, headerParams map[string]string) (*APIResponse, error) {
	return a.SendHttpRequest(requestURL, http.MethodGet, "", headerParams, nil, nil, "", nil)
}

func (a OAuth2Api) SendHttpPost(requestURL string, postBody string, headerParams map[string]string) (*APIResponse, error) {
	return a.SendHttpRequest(requestURL, http.MethodPost, postBody, headerParams, nil, nil, "", nil)
}

func (a OAuth2Api) SendHttpPut(requestURL string, postBody string, headerParams map[string]string) (*APIResponse, error) {
	return a.SendHttpRequest(requestURL, http.MethodPut, postBody, headerParams, nil, nil, "", nil)
}

func (a OAuth2Api) SendHttpPatch(requestURL string, postBody string, headerParams map[string]string) (*APIResponse, error) {
	return a.SendHttpRequest(requestURL, http.MethodPatch, postBody, headerParams, nil, nil, "", nil)
}

func (a OAuth2Api) SendHttpDelete(requestURL string, headerParams map[string]string) (*APIResponse, error) {
	return a.SendHttpRequest(requestURL, http.MethodDelete, "", headerParams, nil, nil, "", nil)
}

func (a OAuth2Api) SendHttpRequest(
	requestURL string,
	method string,
	postBody string,
	headerParams map[string]string,
	queryParams url.Values,
	formParams map[string]string,
	fileName string,
	fileBytes []byte) (*APIResponse, error) {

	localVarHttpMethod := method
	localVarPath := requestURL
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := queryParams
	localVarFormParams := formParams
	localVarPostBody := postBody
	localVarFileName := fileName
	localVarFileBytes := fileBytes

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	// Set or override default headers
	for name, value := range headerParams {
		localVarHeaderParams[name] = value
	}

	// set "Authorization" Header
	tokenResp, popPrivKey, err := a.GetOAuth2Token("", "")
	if err != nil {
		return nil, err
	}
	localVarHeaderParams["Authorization"] = "Bearer " + tokenResp.AccessToken

	// set "104-Track-Id" header
	if localVarHeaderParams["104-Track-Id"] == "" {
		localVarHeaderParams["104-Track-Id"] = uuid.New()
	}

	// set "104-PoP-Timestamp" header
	localVarHeaderParams["104-PoP-Timestamp"] = convertUnixTimestampToString(time.Now().UTC().Unix())

	// set "104-PoP-Signature" header
	reqUrl, err := url.Parse(localVarPath)
	if err != nil {
		return nil, err
	}

	popSignature, err := a.CreatePoPSignature(popPrivKey, localVarHttpMethod, reqUrl.Path, reqUrl.Host, localVarHeaderParams["104-Track-Id"], localVarHeaderParams["104-Token-Chain"], localVarHeaderParams["104-PoP-Timestamp"], localVarPostBody)
	if err != nil {
		return nil, err
	}
	localVarHeaderParams["104-PoP-Signature"] = popSignature

	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "SendHttpRequest", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	return localVarAPIResponse, err
}

func (a OAuth2Api) GetPoPKeyPair(keyId string) (*JsonWebKeySet, error) {
	cacheKey := CachePoPJWKSPrefix + keyId
	if popJwks, _ := a.Configuration.cacheGet(cacheKey); popJwks != nil {
		return popJwks.(*JsonWebKeySet), nil
	}
	popJWKS, err := CreateECKeyPair(keyId, "pop:")
	if err == nil {
		a.Configuration.cacheSet(cacheKey, popJWKS, 30 * time.Minute)
	}
	return popJWKS, err
}

func (a OAuth2Api) CreatePoPNonce(method, path, host, trackId, tokenChain, popTimestamp, payload string) string {
	return method + "\n" +
		path + "\n" +
		host + "\n" +
		trackId + "\n" +
		tokenChain + "\n" +
		popTimestamp + "\n" +
		payload
}

func (a OAuth2Api) CreatePoPSignature(popPrivateKey *ecdsa.PrivateKey, method, path, host, trackId, tokenChain, popTimestamp, payload string) (string, error) {
	if popPrivateKey == nil {
		return "", errors.New("PoP private key must be set")
	}

	nonce := a.CreatePoPNonce(method, path, host, trackId, tokenChain, popTimestamp, payload)

	hash := sha256.Sum256([]byte(nonce))
	signature, err := ecdsaSign(string(hash[:]), popPrivateKey)
	if err != nil {
		return "", errors.New("create PoP signature failed: " + err.Error())
	}
	return base64.RawURLEncoding.EncodeToString([]byte(signature)), nil
}
