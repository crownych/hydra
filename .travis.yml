sudo: required

language: go

dist: xenial

services:
  - docker

go_import_path: github.com/ory/hydra

go:
  - 1.11.x

env:
  - DEP_VERSION="0.5.0"

before_install:
  - curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o $GOPATH/bin/dep
  - chmod +x $GOPATH/bin/dep
  - docker pull ekino/wiremock

install:
  - dep ensure
  - go get github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/pierrre/gotestcover github.com/bradfitz/goimports

script:
  - touch ./coverage.tmp
  - |
    echo 'mode: atomic' > coverage.txt
  - |
    go list ./... | grep -v /vendor | grep -v /internal | xargs -n1 -I{} sh -c 'go test -short -coverprofile=coverage.tmp -coverpkg $(go list ./... | grep -v /vendor | grep -v /internal | tr "\n" ",") {} && tail -n +2 coverage.tmp >> coverage.txt || exit 255' && rm coverage.tmp
  - goveralls -coverprofile="coverage.txt"

before_deploy:
  # Set deploy/demo branch variables
  - if [[ $TRAVIS_BRANCH == "deploy/demo" ]]; then
      export AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID};
      export AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY};
      export TASK_DEFINITION_TEMPLATE="${TRAVIS_BUILD_DIR}/scripts/deploy/demo-task-definition.json";
      export TASK_DESIRED_COUNT="1";
      # Overwrite ECS_SERVICE_STACKNAME for demo env
      export ECS_SERVICE_STACKNAME=demo-${ECS_SERVICE_STACKNAME}
    fi
  # Set deploy/develop branch variables
  - if [[ $TRAVIS_BRANCH == "deploy/develop" ]]; then
      export AWS_ACCESS_KEY_ID=${DEV_AWS_ACCESS_KEY_ID};
      export AWS_SECRET_ACCESS_KEY=${DEV_AWS_SECRET_ACCESS_KEY};
      export TASK_DEFINITION_TEMPLATE="${TRAVIS_BUILD_DIR}/scripts/deploy/develop-task-definition.json";
      export TASK_DESIRED_COUNT="1";
    fi
  # Set deploy/staging branch variables
  - if [[ $TRAVIS_BRANCH == "deploy/staging" ]]; then
      export AWS_ACCESS_KEY_ID=${STAGING_AWS_ACCESS_KEY_ID};
      export AWS_SECRET_ACCESS_KEY=${STAGING_AWS_SECRET_ACCESS_KEY};
      export TASK_DEFINITION_TEMPLATE="${TRAVIS_BUILD_DIR}/scripts/deploy/staging-task-definition.json";
      export TASK_DESIRED_COUNT="1";
    fi
  # Set deplopy/production branch variables
  - if [[ $TRAVIS_BRANCH == "deploy/production" ]]; then
      export AWS_ACCESS_KEY_ID=${PRODUCTION_AWS_ACCESS_KEY_ID};
      export AWS_SECRET_ACCESS_KEY=${PRODUCTION_AWS_SECRET_ACCESS_KEY};
      export TASK_DEFINITION_TEMPLATE="${TRAVIS_BUILD_DIR}/scripts/deploy/production-task-definition.json";
      export TASK_DESIRED_COUNT="2";
    fi  

deploy:
  - provider: script
    skip_cleanup: true
    script: bash ${TRAVIS_BUILD_DIR}/scripts/deploy/deploy.sh
    on:
      branch:
        - deploy/demo
        - deploy/develop
        - deploy/staging
        - deploy/production
